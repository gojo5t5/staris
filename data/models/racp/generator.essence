$racp
$ written by: Peter Nightingale
language ESSENCE 1.3

$$$$ Let the tuner decide the following: $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

given nResources: int(2..5)   $ Number of resources. 
given nTasks: int(1..60) $ Number of tasks.  1 and nTasks are dummy starting and ending ones. 


given cost_bound1, cost_bound2 : int(1..10)  $ entries in cost matrix lie between these two values.

given dur_bound1, dur_bound2 : int(1..10)   $ entries in dur matrix lie between these two values. 

given res_zeros: int(0..100) $ percentage of resource requirement entries that are zero. 
given res_bound1, res_bound2 : int(1..10)   $ For non-zero resource requirements, lie between these values. 

$  Precedence graph. 
given prec_layers : int(4..7)
given prec_density : int(1..3)  $ average number of edges per task in succ

given tMax : int(20..100)

letting Res be domain int(1..nResources)
letting Tasks be domain int(1..nTasks)

$$$$ Fill in the details of the required resources, task precedences etc. $$$$$$$$$$$$$$$

$  Pass through these values into the solution. 
find n_res : int(nResources)
find n_tasks : int(nTasks)
find t_max : int(tMax)

$ Unit cost of resources
find cost: matrix indexed by [Res] of int(min([cost_bound1, cost_bound2])..max([cost_bound1, cost_bound2]))

$ Duration of tasks
find dur: matrix indexed by [Tasks] of int(min([dur_bound1, dur_bound2])..max([dur_bound1, dur_bound2]))

$ Resource requirements of tasks

find succ_rel: matrix indexed by [Tasks] of set of int(2..nTasks)  $  The successor relation.  Task 1 cannot be successor of any other.  

find succ_levels : matrix indexed by [Tasks] of int(1..prec_layers)  $ map each vertex to a layer to ensure acyclicity in succ. 

letting rr_entries be nTasks*nResources

find rr: matrix indexed by [Res, Tasks] of int(0, min([res_bound1, res_bound2])..max([res_bound1, res_bound2]))     $  O or within the interval
find rr_zero_entries : int(0..rr_entries)

$  Make sure that all tasks have an earliest start time within range, so the mzn model does not crash. 
$ find est : matrix indexed by [Tasks] of int(0..tMax)

such that

$ Percentage of rr that is 0. 
sum([ toInt(rr[i,j]=0) | i : Res, j : Tasks])=rr_zero_entries,

$ Percentage given by tuner lies within an interval (interval may be one value, depending on size of matrix). 
res_zeros >= (rr_zero_entries*100)/rr_entries, 
res_zeros <= ( (rr_zero_entries+1)*100)/rr_entries,

$ Make the succ relation acyclic. 

and([ succ_levels[t]<succ_levels[successor] | t: Tasks, successor <- succ_rel[t]]),

$ Final task can have no successors
succ_rel[nTasks]={},

$ Every other task has to have at least one successor. 
forAll t : int(1..nTasks-1). |succ_rel[t]|>0,

$ Every task except the first has at least one predecessor
forAll t : int(2..nTasks). exists t2 : Tasks. t in succ_rel[t2],

$ Set the layers of the first and last task.
succ_levels[1]=1,
succ_levels[nTasks]=prec_layers,

$ dominance: successors of 1 must be in layer 2. Makes little difference to Minion
prec_layers>2 ->
    and([t!=nTasks -> succ_levels[t]=2 | t <- succ_rel[1]]),

$ Tasks 1 and nTasks have no resource requirements

forAll t : int(1,nTasks). forAll r : Res. rr[r,t]=0,

$  Average density of the succ relation. 
sum([ |succ_rel[t]| | t : Tasks])/n_tasks = prec_density,

$  Make sure all tasks have an est within range.  Should no longer be needed.  
$est[1]=0,
$forAll t : Tasks . and([ est[t]+dur[t]<=est[tsucc] | tsucc <- succ_rel[t]]),

true
