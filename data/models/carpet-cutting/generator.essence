$ carpet-cutting
$ A generator model for the Carpet Cutting problem
$ Written by: Ian Miguel (ijm@st-andrews.ac.uk)

$$$$ Let the tuner decide the following: $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

$ Roll width and maximum roll length
given tuner_roll_wid: int(1..1000)
given tuner_max_roll_len: int(1..20000)

$ Number of room carpets
given tuner_n_rm: int(1..50)
letting Rooms be domain int(1..tuner_n_rm)

$ Number of rectangles of room carpets
given tuner_n_rm_rec: int(1..50)
letting RmRecs be domain int(1..tuner_n_rm_rec)

$ Number of stair carpets
given tuner_n_st: int(0..5)
letting Stairs be domain int(1..tuner_n_st)

$ Orientation identifiers: 1 - 0, 2 - 90, 3 - 180, and 4 - 270
$ Rotation is anti-clockwise.
letting Ori be domain int(1..4)

$ Replicate given parameters with find statements so they appear in the output.
find roll_wid: int(1..tuner_roll_wid)
find max_roll_len: int(1..tuner_max_roll_len)
find n_rm: int(1..tuner_n_rm)
find n_rm_rec: int(1..tuner_n_rm_rec)
find n_st: int(0..tuner_n_st)

$$$$ Fill in the details of the required carpets. $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

$ Composition of each room carpet: this is a partition.
find rm_rec_ids: matrix indexed by[Rooms] of set of RmRecs
$ Allowed rotation for each room carpet. Depending on carpet pile, not all of
$  these may be allowable, but we don't allow the empty set.
find rm_ori: matrix indexed by[Rooms] of set (minSize 1) of Ori
$ Maximal length in orientation 1 (0 degree)
find rm_max_len: matrix indexed by[Rooms] of int(1..tuner_max_roll_len)
$ Maximal width in orientation 1  (0 degree)
find rm_max_wid: matrix indexed by[Rooms] of int(1..tuner_roll_wid)

$ These are the constituent rectangles of each carpet.
find rm_rec_len: matrix indexed by[RmRecs] of int(1..tuner_max_roll_len)
find rm_rec_wid: matrix indexed by[RmRecs] of int(1..tuner_roll_wid)
find rm_rec_os_x: matrix indexed by[RmRecs,Ori] of int(-1..tuner_max_roll_len)
find rm_rec_os_y: matrix indexed by[RmRecs,Ori] of int(-1..tuner_roll_wid)

$ This is an auxiliary function for this generator to map from rectangles back
$  to carpets. Insisting that it is a surjection makes sure each room has at
$  least one rectangle.
find AuxRmRecToCarpet: function (total, surjective) RmRecs --> Rooms

$ Stair carpets
find st_len: matrix indexed by[Stairs] of int(1..tuner_max_roll_len)
find st_wid: matrix indexed by[Stairs] of int(1..tuner_roll_wid)
find st_no_steps: matrix indexed by[Stairs] of int(1..10)
find st_min_steps: matrix indexed by[Stairs] of int(1..10)
find st_max_breaks: matrix indexed by[Stairs] of int(1..10)

$$$$ Constrain the generator problem variables to take sensible values $$$$$$$$$

such that

$ Make sure the tuner parameters are reflected in the output.
roll_wid = tuner_roll_wid,
max_roll_len = tuner_max_roll_len,
n_rm = tuner_n_rm,
n_rm_rec = tuner_n_rm_rec,
n_st = tuner_n_st,

$ rm_rec_ids is really a partition.
forAll room1, room2 : Rooms, room1 < room2  .
  (rm_rec_ids[room1] intersect rm_rec_ids[room2]) = {},

$ From the description in the paper, the sensible sets of allowed orientations
$  appear to be 1 (0 degrees); 1, 2 (0 and 90); and 1, 2, 3, 4
forAll room : Rooms .
  rm_ori[room] = {1} \/
  rm_ori[room] = {1, 2} \/
  rm_ori[room] = {1, 2, 3, 4},

$ The unused orientations for rm_rec_os are expected to be -1.
$ Allowed orientations are associated with carpets rather than rectangles, so
$  we need to know of which carpet each rectangle is a constituent. This is what
$  the auxiliary rmRecToCarpet function gives us. We connect this to rm_rec_ids
forAll rec : RmRecs .
  rec in rm_rec_ids[AuxRmRecToCarpet(rec)],

$ Now we can force the unused orientation offsets to be -1.
forAll rec : RmRecs .
  forAll o : Ori .
    (rm_rec_os_x[rec,o] = -1)
    =
    !(o in rm_ori[AuxRmRecToCarpet(rec)]),
forAll rec : RmRecs .
  forAll o : Ori .
    (rm_rec_os_y[rec,o] = -1)
    =
    !(o in rm_ori[AuxRmRecToCarpet(rec)]),

$ According to the paper:
$ The origin of a room carpet is the bottom left corner of the smallest
$  rectangle that encloses all its rectangles in each orientation.
$ Each rectangle has a width and a length which are given for the 0o orientation.

$ So, for each room carpet we're going to need to generate a collection of
$  rectangles that touch but don't overlap, and use them to populate
$  rm_rec_len/wid, rm_os_x/y.
$ A simple approach would be to produce a y-sorted collection of rectangles
$  where the sum of the lengths of the previous rectangles determine the y
$  offset of the current rectangle (in 0 degree) and the x offset is free.
$ This would preclude shapes such as: X_X
$                                     XXX
$ I suppose could mitigate this by allowing parallel rectangles of the same
$  height, but being careful of the x offsets.
$ NB I'm taking length to be in the x axis, width in the y axis.
$    This seems to correspond to what is going on in the example below.

forAll rec : RmRecs .
  (AuxRmRecToCarpet(rec) = AuxRmRecToCarpet(rec-1)) ->
  (rm_rec_os_y[rec,1] = rm_rec_os_y[rec-1,1] + rm_rec_wid[rec-1]),

$ This leaves os_x and length free.

$ max_len is simply the maximum (length+offset) over the rectangles.
forAll room : Rooms .
  rm_max_len[room] =
    max([rm_rec_len[rec] + rm_rec_os_x[rec,1] |
         rec : RmRecs, AuxRmRecToCarpet(rec) = room]),
$ Similarly for max_wid
forAll room : Rooms .
  rm_max_wid[room] =
    max([rm_rec_wid[rec] + rm_rec_os_y[rec,1] |
         rec : RmRecs, AuxRmRecToCarpet(rec) = room]),

$ All of the following are expressed in terms of orientation 1, which we can
$  rely upon.
$ Compute orientation 2, if used:
forAll rec : RmRecs .
  (2 in rm_ori[AuxRmRecToCarpet(rec)])
  ->
  ((rm_rec_os_x[rec,2] = rm_max_wid[AuxRmRecToCarpet(rec)] -
                         (rm_rec_os_y[rec,1]+rm_rec_wid[rec]))
   /\
   (rm_rec_os_y[rec,2] = rm_rec_os_x[rec,1])),

$ Compute orientation 3, if used:
forAll rec : RmRecs .
  (3 in rm_ori[AuxRmRecToCarpet(rec)])
  ->
  ((rm_rec_os_x[rec,3] = rm_max_len[AuxRmRecToCarpet(rec)] -
                         (rm_rec_os_x[rec,1]+rm_rec_len[rec]))
   /\
   (rm_rec_os_y[rec,3] = rm_max_wid[AuxRmRecToCarpet(rec)] -
                         (rm_rec_os_y[rec,1]+rm_rec_wid[rec]))),

$ Compute orientation 4, if used:
forAll rec : RmRecs .
  (4 in rm_ori[AuxRmRecToCarpet(rec)])
  ->
  ((rm_rec_os_x[rec,4] = rm_rec_os_y[rec,1])
   /\
   (rm_rec_os_y[rec,4] = rm_max_len[AuxRmRecToCarpet(rec)] -
                         (rm_rec_os_x[rec,1]+rm_rec_len[rec]))),

$ Stairs: min_steps must be leq no_steps
forAll stair : Stairs .
  st_min_steps[stair] <= st_no_steps[stair],

$ Stairs: No point allowing too many breaks.
forAll stair : Stairs .
  st_no_steps[stair] / st_max_breaks[stair] >= st_min_steps[stair],
  
$ Trying to avoid trivially unsat instances.
sum(rm_max_len) <= tuner_max_roll_len,
sum(st_len) <= tuner_max_roll_len,

true

$$$$ Worked example, explains how orientation cts above derived $$$$$$$$$$$$$$$$

$ Example:
$ https://github.com/MiniZinc/minizinc-benchmarks/blob/master/carpet-cutting/mzn_rnd_test.01.dzn

$ In this example the room recs are given x-sorted. E.g. Room 3 is composed of
$  rectangles 3, 4, 5.
$  rec 3: len = 74, wid = 147.
$         x-offset is 0, y-offset is 57
$  rec 4: len = 197, wid = 204.
$         x-offset is 74 (i.e. len of rec 3), y-offset is 0
$  rec 5: len = 72, wid = 138.
$         x-offset is 271 (i.e. x-offset 4 + len 4), y-offset is 66
$ This gives a picture, crudely, if we assume +y is up:
$ 3445     NB Tops of these are all exactly aligned at 204.
$  44
$ If +y is down, we get:
$  44
$ 3445
$
$ We know our origin is always bottom-left.
$ Now look at offsets for 2nd orientation, which is 90 degrees anti-clockwise:
$ rec 3: x-offset is 0, y-offset is 0 (i.e. this is bottom-left corner now)
$ rec 4: x-offset 0, y-offset 74
$ rec 5: x-0ffset 0, y-offset 271
$ giving:
$ 5
$ 44
$ 44
$ 3
$ and therefore showing that +y *is* up
$ so, for orientation 2:
$   x offset is maxwid-(orientation 1 y offset+rec width)
$   y offset is orientation 1 x-offset.
$
$ Now look at offsets for 3rd orientation, which is 180 degrees.
$ rec 3: x-offset is 269, y-offset is 0
$ rec 4: x-offset 72, y-offset 0
$ rec 5: x-0ffset 0, y-offset 0
$ giving:
$  44
$ 5443
$ x offset is reflection of orientation 1 x offset wrt max len:
$   x offset is maxlen-(orientation 1 x-offset+rec len)
$ y offset is reflection of orientation 1 y offset wrt max width:
$   y offset is maxwid-(orientation 1 y-offset+rec width)
$     = orientation 2 y-offset [if not -1]
$
$ 4th orientation (270 degrees):
$ rec 3: x-offset is 57, y-offset is 269
$ rec 4: x-offset 0, y-offset 72
$ rec 5: x-0ffset 66, y-offset 0
$ giving:
$  3
$ 44
$ 44
$  5
$ x offset is orientation 1 y offset
$ y offset is orientation 3 x offset is:
$   maxlen-(orientation 1 x-offset+rec len)
